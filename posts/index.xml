<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sabyasachi Bhattacharya</title>
    <link>https://njoysubho.github.io/posts/</link>
    <description>Recent content in Posts on Sabyasachi Bhattacharya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2021 07:54:22 +0100</lastBuildDate>
    
	<atom:link href="https://njoysubho.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Weekend Journal- Week-06</title>
      <link>https://njoysubho.github.io/posts/the-weekend-journal-02/</link>
      <pubDate>Sun, 14 Feb 2021 07:54:22 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/the-weekend-journal-02/</guid>
      <description>Resilience4j
This work I deep dive into resilience4j which is an alternative to Hystrix. Resilience4j is a lightweight fault tolerance library and a possible alternative to Hystrix. Resilience4j comes with following core modules -
  resilience4j-circuitbreaker: Circuit breaking
  resilience4j-ratelimiter
  resilience4j-bulkhead
  resilience4j-retry
  resilience4j-timelimiter
  resilience4j-cache
  one can also stacked together combinations of different resiliency patterns. It also comes with spring-boot starter.</description>
    </item>
    
    <item>
      <title>The Weekend Journal 1</title>
      <link>https://njoysubho.github.io/posts/weeklyjournal-01/</link>
      <pubDate>Fri, 08 Jan 2021 07:02:58 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/weeklyjournal-01/</guid>
      <description>Welcome to The Weekly Journal. Here I will try to compile link,blogposts etc which I read that week. This week I will start with a little look back on 2020.
2020 like everyone else I remained constantly worrying, but I did manage to read some books and try out few things as follows
  12 week a year - I can say till now the most influencing blinks that I read.</description>
    </item>
    
    <item>
      <title>Spring Under the hood-Inside Feign and client side discovery with consul</title>
      <link>https://njoysubho.github.io/posts/consul-feign/</link>
      <pubDate>Sat, 12 Sep 2020 16:04:01 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/consul-feign/</guid>
      <description>Feign using consul as discovery service is easy to setup thanks to Spring Autoconfigurations, but let&amp;rsquo;s see how this magic is actually done -
Spring cloud open feign comes with FeignLoadBalancerAutoConfiguration . If we see closely it imports three more LoadBalancerAutoConfigurations
  HttpClientFeignLoadBalancerConfiguration, OkHttpFeignLoadBalancerConfiguration, DefaultFeignLoadBalancerConfiguration
  If classpath has Apache http client then it uses HttpClientFeignLoadBalancerConfiguration , if path has Ok http client then it uses OkHttpFeignLoadBalancerConfiguration otherwise uses it DefaultFeignLoadBalancerConfiguration which in turn uses Apache Http client.</description>
    </item>
    
    <item>
      <title>Post</title>
      <link>https://njoysubho.github.io/posts/generic-variance/</link>
      <pubDate>Sun, 23 Aug 2020 17:55:25 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/generic-variance/</guid>
      <description>  Generics in Java is invariant by default if Sub extends Super then List= List// will not compile
  But we may need to use this. Jaba use wildcard concept
  Producrer extends and consumer super
  PE -&amp;gt; so that we bound the upper limit
  </description>
    </item>
    
    <item>
      <title>Provisioned Concurrency</title>
      <link>https://njoysubho.github.io/posts/provisioned-concurrency/</link>
      <pubDate>Sun, 02 Aug 2020 11:09:40 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/provisioned-concurrency/</guid>
      <description>AWS Lambda is the serverless offering from amazon. In serverless the provider is responsible for settung up a runtime as and when needed for the deployed application/function to run. Typically these are small functions which are quick to start up and finish their task. Lambdas when invoked, has a small startup overhead. This startup overhead involves fetching the function artifact from S3 , setting up networking, starting up the application. Java applications often suffer from this cold start up problem , and depends on application this can go up quite a bit.</description>
    </item>
    
    <item>
      <title>Spring Boot Liveness</title>
      <link>https://njoysubho.github.io/posts/spring-boot-liveness/</link>
      <pubDate>Wed, 20 May 2020 12:21:24 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-boot-liveness/</guid>
      <description>Spring Boot Actuator Health endpoint since 2.3.0 comes with two health groups Liveness and Readiness. Actuator Health points are being used to reflect the status of the application. Spring Boot also provides a way to add multiple health indicators together and form a group. As a continuation to this concept Spring Boot provides two HealthIndicator LivenessStateIndicator and ReadinessStateIndicator. These two indicators are added to liveness and readiness group respectively by AvailabilityProbesHealthEndpointGroups.</description>
    </item>
    
    <item>
      <title>Deploy EKS Kubernetes Cluster with fargate</title>
      <link>https://njoysubho.github.io/posts/aws-eks-fargate/</link>
      <pubDate>Sat, 16 May 2020 15:42:39 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/aws-eks-fargate/</guid>
      <description>EKS is managed kubernetes service by AWS. This post will describe networking setup for EKS cluster.
EKS have two options public cluster and private-public cluster. In the public cluster all nodes get a public IP and they can access internet traffic and vice versa.
In public-private scheme nodes are all in private subnet and services are exposed via Loadbalancers in public subnet.
We will see network configuration about public-private scheme. Below is the conceptual design of the cluster</description>
    </item>
    
    <item>
      <title>AWS Fargate Task Networking</title>
      <link>https://njoysubho.github.io/posts/aws-fargate-task-networking/</link>
      <pubDate>Tue, 31 Mar 2020 15:34:39 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/aws-fargate-task-networking/</guid>
      <description>In order to explore more about deploying on ECS using terraform and github action I created a small project but as I try to deploy it on AWS ECS I found some interesting issue.
 So I created a services in a subnet , the subnet has rule that route all internet traffic to an internet gateway. The service has a simple task. I created all the infrastructure using terraform and deployed using github.</description>
    </item>
    
    <item>
      <title>Traceid Logging with Micronaut</title>
      <link>https://njoysubho.github.io/posts/traceid-micronaut-log/</link>
      <pubDate>Sat, 05 Oct 2019 10:58:51 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/traceid-micronaut-log/</guid>
      <description>Distributed tracing is must have when we create our microservices . Frameworks like Spring Boot,Micronaut comes with the support of creating TraceId,SpanId and propagate to visualization tools like Zipkin,Jaegar . This post shortly describe what we need to add in order to log the TraceId in application or access log . Logging traceId helps us in correlating the logs . For logging I have used Slf4j with logback . In micronaut support for generating TraceId comes quite easily just matter of adding proper dependencies which can be found here https://guides.</description>
    </item>
    
    <item>
      <title>Istio - Introduction</title>
      <link>https://njoysubho.github.io/posts/istio/</link>
      <pubDate>Sat, 04 May 2019 10:55:10 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/istio/</guid>
      <description>Adoption of microservices architecture is on rising. Teams reap benefits of microservices which enables them to deliver faster, chose a language stack for their choice, quick feedback cycle, etc but, this freedom and pace comes at the cost of complexity to manage a new distributed system which must work in collaboration with each other to deliver the business functionalities. Reliability, fault tolerance, Tracing , Observability are some must-have aspect in a microservice architecture, add to it the functionality of canary deployment, traffic shifting and suddenly there is a whole layer of support system that is required for a service to deliver reliably.</description>
    </item>
    
    <item>
      <title>Start Journey for a modern application development</title>
      <link>https://njoysubho.github.io/posts/modern-development/</link>
      <pubDate>Wed, 01 May 2019 18:56:02 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/modern-development/</guid>
      <description>The technology landscape for developers is changing rapidly. From monolith applications to microservices, from an application deployed on-premise datacenter to cloud platform, also applications deployed on virtualized machines to the containerized environment, the shift is huge. As a developer, it is important to keep up to date with this changing landscape both upgrading oneself as well as looking for a new job. As there are a plethora of technologies and there are always much hype and evangelism around a new technology it is always good to start with a much stable language, framework, and tool.</description>
    </item>
    
  </channel>
</rss>