<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sabyasachi Bhattacharya</title>
    <link>https://njoysubho.github.io/</link>
    <description>Recent content on Sabyasachi Bhattacharya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2022 22:23:24 +0100</lastBuildDate>
    
	<atom:link href="https://njoysubho.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aws Lambda Custom Runtime</title>
      <link>https://njoysubho.github.io/posts/aws-lambda-custom-runtime/</link>
      <pubDate>Sat, 26 Nov 2022 22:23:24 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/aws-lambda-custom-runtime/</guid>
      <description>Introduction AWS Lambda supports various runtimes like Java, Go, Python , Nodejs, but what if we like to use a language for which lambda doesn&amp;rsquo;t have a support? What if even for a supported language we want to use a version which is yet not supported by AWS Lambda? Lambda has support for custom runtime. Custom runtime provides an opportunity to define support for runtime which is yet to be supported out of the box.</description>
    </item>
    
    <item>
      <title>Spring Cloud Feign</title>
      <link>https://njoysubho.github.io/posts/spring-cloud-feign/</link>
      <pubDate>Sat, 06 Aug 2022 11:22:42 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-cloud-feign/</guid>
      <description>Often a service needs to call Http endpoints , Feign comes from the OpenFeign project makes it easier to call http endpoints in a declarative fashion. Spring has openfeign integraton through its Spring Cloud OpenFeign integration.
How To include feign clients The actual project for feign is OpenFeign https://github.com/OpenFeign/feign . Spring comes with it&amp;rsquo;s own starter . Add below dependency to the project
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; For an example let&amp;rsquo;s create a service named feign-serviceA which will call feign-serviceB .</description>
    </item>
    
    <item>
      <title>Spring Boot Metrics</title>
      <link>https://njoysubho.github.io/posts/spring-boot-metrics/</link>
      <pubDate>Sun, 22 May 2022 10:12:53 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-boot-metrics/</guid>
      <description>Introduction Observability is one of the pillars of modern microservices architecture. Application metrics is one dimension of that observbility. When an application runs on production we may want to know various operational metrics like memory,cpu ,threadpool usage etc as well as buisness metrics for example how many request for a particular operations are made. Spring boot with the help of micrometer enables application developers to expose various metrices.
Setup metrics To add support for metrics , we need to add actuator dependency</description>
    </item>
    
    <item>
      <title>Spring Jpa</title>
      <link>https://njoysubho.github.io/posts/spring-jpa/</link>
      <pubDate>Sun, 08 May 2022 10:41:13 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-jpa/</guid>
      <description>Introduction We started with a simple hello world application and we covered up to how to set up our database schema flyway. We are now ready to write some code which will interact with database. Before we jump on to code let&amp;rsquo;s look at a bit of history. Java has a nice JDBC api which helps us query database. Making it a base many ORM tools come into existence, Hibernate, Mybatis, Toplink to name a few.</description>
    </item>
    
    <item>
      <title>Spring Flyway</title>
      <link>https://njoysubho.github.io/posts/spring-flyway/</link>
      <pubDate>Sat, 30 Apr 2022 16:37:58 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-flyway/</guid>
      <description>Introduction Most of the services that we generally encounter in our daily job will simply take some input from users and populate database , and read from database and show it on UI. Each database has a schema, now it is rarely happens that we know each nitty gritty of our domain and come up with a perfect schema at day one. Most of the time we go thorugh an iterative process of modifying our schema as and when requirments change.</description>
    </item>
    
    <item>
      <title>Spring Rest Openapi</title>
      <link>https://njoysubho.github.io/posts/spring-rest-openapi/</link>
      <pubDate>Sun, 24 Apr 2022 08:23:28 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-rest-openapi/</guid>
      <description>Till now we have seen how to generate a new spring boot application and then how to containerize it. However our application till does not have any functionality. Today we will see how to create a REST API with Spring boot. However we will take a schema first approach and we will generate the REST API stub using the schema. This article will show how a OpenAPI specification looks like and how can we generate our REST API stub using the schema.</description>
    </item>
    
    <item>
      <title>Spring Dockerize</title>
      <link>https://njoysubho.github.io/posts/spring-dockerize/</link>
      <pubDate>Sat, 16 Apr 2022 10:22:24 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-dockerize/</guid>
      <description>In my previous post we saw how to create a simple spring boot application which actually does nothing much. I also touched about how to package that as jar file and run locally. However currently in production environment docker is hugely adopted. In this post we will see how to dockerize our spring boot application.
First Step, just works FROMubuntu:18.04ARG MAVEN_VERSION=3.8.5ARG BASE_URL=https://downloads.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries# Install JavaRUN apt-get update \  &amp;amp;&amp;amp; apt-get install -y curl\  &amp;amp;&amp;amp; apt-get install -y openjdk-17-jdk ca-certificates-java\  &amp;amp;&amp;amp; apt-get clean \  &amp;amp;&amp;amp; update-ca-certificates -fENV JAVA_HOME /usr/lib/jvm/java-17-openjdk-amd64RUN export JAVA_HOME# Install MavenRUN curl -OLs ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.</description>
    </item>
    
    <item>
      <title>Spring First Step</title>
      <link>https://njoysubho.github.io/posts/spring-first-step/</link>
      <pubDate>Sun, 10 Apr 2022 10:16:33 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-first-step/</guid>
      <description>Introduction I have been using Spring framework ecosystem since 2012. Overtime many new modules has been added and the adoption of the framework has increased. As of today it is I can say most popular framework in the industry. But one problem remains for new users of Spring that because Spring does a lot of work under-the-hood, it is sometimes feels like magic and generally production systems differ a lot from your getting started guide it is even more important to not only rely on what is coming out of the box but also to understand how it works.</description>
    </item>
    
    <item>
      <title>Deploy model with FastAPI and Heroku</title>
      <link>https://njoysubho.github.io/posts/fastapi-ml/</link>
      <pubDate>Tue, 15 Mar 2022 20:40:35 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/fastapi-ml/</guid>
      <description>In this blog we will see how we can deploy our model with FastAPI and Heroku. Below technologies will be used:
 FastAPI Heroku Docker Github workflow AWS  Our model will classify images of dogs and cats.
First Generating the model We use the data from https://www.kaggle.com/c/dogs-vs-cats . A model is creted using pretrained resnet model. The kaggle notebook is available here. Not really a SOTA model but it is good enough for our purposes.</description>
    </item>
    
    <item>
      <title>Give your learning a structure</title>
      <link>https://njoysubho.github.io/posts/learning/</link>
      <pubDate>Sat, 23 Oct 2021 18:06:38 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/learning/</guid>
      <description>Technology is ever-evolving and as developers, we are in a constant chase to keep ourselves up-to-date. If you are someone like me who often suffers from FOMO ( Fear of missing out), you might have found yourself with a never-ending TODO list of things to learn and yet had a feeling that too little has been achieved. Below are some of the tricks that I have used over time to keep myself focussed and manageable.</description>
    </item>
    
    <item>
      <title>Spring Boot Actuator Health Endpoint</title>
      <link>https://njoysubho.github.io/posts/spring-health-endpoint/</link>
      <pubDate>Mon, 19 Jul 2021 23:11:10 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-health-endpoint/</guid>
      <description>Health endpoint for a service exposes status of it&amp;rsquo;s state. This state information is useful to determine whether the application is up and ready to accept requests. Normally when a service is fronted by a Load Balancer, the loadbalancer uses the information derived from the health endpoint to decide whether to route traffic to that instance of service or not. Spring Boot actuator provides Health Endpoint out of the box. If we add spring-boot-actuator dependency we can get the URI /actuator/health.</description>
    </item>
    
    <item>
      <title>Resilience4j, the path beyond Hystrix</title>
      <link>https://njoysubho.github.io/posts/resilience4j/</link>
      <pubDate>Mon, 08 Mar 2021 08:39:44 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/resilience4j/</guid>
      <description>Introduction
In discussions of cloud-native applications or microservices, the theme that takes a center stage is Resiliency. Hystrix from Netflix OSS has been the go-to library for developers to implement resiliency patterns, in many cases, it&amp;rsquo;s integration with other application frameworks like Spring, Micronaut has made the developer life easier. However, Hystrix has been put into maintenance mode and Spring cloud 2020.0.0 (aka Ilford) has stopped its support for Hystrix. This is a huge change, what&amp;rsquo;s the migration path ahead, what is the alternative?</description>
    </item>
    
    <item>
      <title>The Weekend Journal- Week-06</title>
      <link>https://njoysubho.github.io/posts/the-weekend-journal-02/</link>
      <pubDate>Sun, 14 Feb 2021 07:54:22 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/the-weekend-journal-02/</guid>
      <description>Resilience4j
This work I deep dive into resilience4j which is an alternative to Hystrix. Resilience4j is a lightweight fault tolerance library and a possible alternative to Hystrix. Resilience4j comes with following core modules -
  resilience4j-circuitbreaker: Circuit breaking
  resilience4j-ratelimiter
  resilience4j-bulkhead
  resilience4j-retry
  resilience4j-timelimiter
  resilience4j-cache
  one can also stacked together combinations of different resiliency patterns. It also comes with spring-boot starter.</description>
    </item>
    
    <item>
      <title>The Weekend Journal 1</title>
      <link>https://njoysubho.github.io/posts/weeklyjournal-01/</link>
      <pubDate>Fri, 08 Jan 2021 07:02:58 +0100</pubDate>
      
      <guid>https://njoysubho.github.io/posts/weeklyjournal-01/</guid>
      <description>Welcome to The Weekly Journal. Here I will try to compile link,blogposts etc which I read that week. This week I will start with a little look back on 2020.
2020 like everyone else I remained constantly worrying, but I did manage to read some books and try out few things as follows
  12 week a year - I can say till now the most influencing blinks that I read.</description>
    </item>
    
    <item>
      <title>Spring Under the hood-Inside Feign and client side discovery with consul</title>
      <link>https://njoysubho.github.io/posts/consul-feign/</link>
      <pubDate>Sat, 12 Sep 2020 16:04:01 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/consul-feign/</guid>
      <description>Feign using consul as discovery service is easy to setup thanks to Spring Autoconfigurations, but let&amp;rsquo;s see how this magic is actually done -
Spring cloud open feign comes with FeignLoadBalancerAutoConfiguration . If we see closely it imports three more LoadBalancerAutoConfigurations
  HttpClientFeignLoadBalancerConfiguration, OkHttpFeignLoadBalancerConfiguration, DefaultFeignLoadBalancerConfiguration
  If classpath has Apache http client then it uses HttpClientFeignLoadBalancerConfiguration , if path has Ok http client then it uses OkHttpFeignLoadBalancerConfiguration otherwise uses it DefaultFeignLoadBalancerConfiguration which in turn uses Apache Http client.</description>
    </item>
    
    <item>
      <title>Provisioned Concurrency</title>
      <link>https://njoysubho.github.io/posts/provisioned-concurrency/</link>
      <pubDate>Sun, 02 Aug 2020 11:09:40 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/provisioned-concurrency/</guid>
      <description>AWS Lambda is the serverless offering from amazon. In serverless the provider is responsible for settung up a runtime as and when needed for the deployed application/function to run. Typically these are small functions which are quick to start up and finish their task. Lambdas when invoked, has a small startup overhead. This startup overhead involves fetching the function artifact from S3 , setting up networking, starting up the application. Java applications often suffer from this cold start up problem , and depends on application this can go up quite a bit.</description>
    </item>
    
    <item>
      <title>Spring Boot Liveness</title>
      <link>https://njoysubho.github.io/posts/spring-boot-liveness/</link>
      <pubDate>Wed, 20 May 2020 12:21:24 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/spring-boot-liveness/</guid>
      <description>Spring Boot Actuator Health endpoint since 2.3.0 comes with two health groups Liveness and Readiness. Actuator Health points are being used to reflect the status of the application. Spring Boot also provides a way to add multiple health indicators together and form a group. As a continuation to this concept Spring Boot provides two HealthIndicator LivenessStateIndicator and ReadinessStateIndicator. These two indicators are added to liveness and readiness group respectively by AvailabilityProbesHealthEndpointGroups.</description>
    </item>
    
    <item>
      <title>Deploy EKS Kubernetes Cluster with fargate</title>
      <link>https://njoysubho.github.io/posts/aws-eks-fargate/</link>
      <pubDate>Sat, 16 May 2020 15:42:39 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/aws-eks-fargate/</guid>
      <description>EKS is managed kubernetes service by AWS. This post will describe networking setup for EKS cluster.
EKS have two options public cluster and private-public cluster. In the public cluster all nodes get a public IP and they can access internet traffic and vice versa.
In public-private scheme nodes are all in private subnet and services are exposed via Loadbalancers in public subnet.
We will see network configuration about public-private scheme. Below is the conceptual design of the cluster</description>
    </item>
    
    <item>
      <title>AWS Fargate Task Networking</title>
      <link>https://njoysubho.github.io/posts/aws-fargate-task-networking/</link>
      <pubDate>Tue, 31 Mar 2020 15:34:39 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/aws-fargate-task-networking/</guid>
      <description>In order to explore more about deploying on ECS using terraform and github action I created a small project but as I try to deploy it on AWS ECS I found some interesting issue.
 So I created a services in a subnet , the subnet has rule that route all internet traffic to an internet gateway. The service has a simple task. I created all the infrastructure using terraform and deployed using github.</description>
    </item>
    
    <item>
      <title>Traceid Logging with Micronaut</title>
      <link>https://njoysubho.github.io/posts/traceid-micronaut-log/</link>
      <pubDate>Sat, 05 Oct 2019 10:58:51 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/traceid-micronaut-log/</guid>
      <description>Distributed tracing is must have when we create our microservices . Frameworks like Spring Boot,Micronaut comes with the support of creating TraceId,SpanId and propagate to visualization tools like Zipkin,Jaegar . This post shortly describe what we need to add in order to log the TraceId in application or access log . Logging traceId helps us in correlating the logs . For logging I have used Slf4j with logback . In micronaut support for generating TraceId comes quite easily just matter of adding proper dependencies which can be found here https://guides.</description>
    </item>
    
    <item>
      <title>Istio - Introduction</title>
      <link>https://njoysubho.github.io/posts/istio/</link>
      <pubDate>Sat, 04 May 2019 10:55:10 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/istio/</guid>
      <description>Adoption of microservices architecture is on rising. Teams reap benefits of microservices which enables them to deliver faster, chose a language stack for their choice, quick feedback cycle, etc but, this freedom and pace comes at the cost of complexity to manage a new distributed system which must work in collaboration with each other to deliver the business functionalities. Reliability, fault tolerance, Tracing , Observability are some must-have aspect in a microservice architecture, add to it the functionality of canary deployment, traffic shifting and suddenly there is a whole layer of support system that is required for a service to deliver reliably.</description>
    </item>
    
    <item>
      <title>Start Journey for a modern application development</title>
      <link>https://njoysubho.github.io/posts/modern-development/</link>
      <pubDate>Wed, 01 May 2019 18:56:02 +0200</pubDate>
      
      <guid>https://njoysubho.github.io/posts/modern-development/</guid>
      <description>The technology landscape for developers is changing rapidly. From monolith applications to microservices, from an application deployed on-premise datacenter to cloud platform, also applications deployed on virtualized machines to the containerized environment, the shift is huge. As a developer, it is important to keep up to date with this changing landscape both upgrading oneself as well as looking for a new job. As there are a plethora of technologies and there are always much hype and evangelism around a new technology it is always good to start with a much stable language, framework, and tool.</description>
    </item>
    
  </channel>
</rss>